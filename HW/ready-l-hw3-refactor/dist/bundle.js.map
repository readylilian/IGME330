{"version":3,"file":"bundle.js","mappings":"mBAAA,ICAIA,EAAYC,EDGZC,GAA2B,EAC3BC,EAAqB,CAACC,KAAK,EAAEC,MAAM,GAOjCC,EAAW,SAACC,GAEdJ,EAAQ,CAACC,IAAIG,EAAIC,OAAOC,SAAUJ,KAAME,EAAIC,OAAOE,UACvD,EAEMC,EAAe,SAACC,GAElB,GAAGC,UAAUC,YAAY,CACrBD,UAAUC,YAAYC,mBAAmBT,GACzCJ,GAAkB,EAElB,IAAIc,EAAM,IAAIC,eAEdD,EAAIE,OAASC,EAEbH,EAAII,QAAU,WAAOC,QAAQC,IAAI,oBAAqB,EAEtDN,EAAIO,KAAK,MAAO,UA5BA,uCA4BU,eAAOpB,EAAMC,IAAG,gBAAQD,EAAME,KAAI,iBAASO,IACrEI,EAAIQ,M,MAIHC,SAASC,cAAc,aAAgCC,UAAY,8EAE5E,EACMR,EAAgB,SAACS,GAEnB,IAAIZ,EAAMY,EAAEC,OACRC,EAAMC,KAAKC,MAAMhB,EAAIiB,cAErBH,EAAII,QAAQC,SAAkC,GAAvBL,EAAII,QAAQC,QAIlCV,SAASC,cAAc,aAAgCC,UACxD,6BAAsBxB,EAAME,KAAI,cAAMF,EAAMC,IAAG,gCAAwB0B,EAAII,QAAQC,QAAO,gCAAwBL,EAAII,QAAQE,OAAM,SAJnIX,SAASC,cAAc,aAAgCC,UAAY,kCAM5E,EAEMU,EAAe,SAACzB,GAGlB,IAAII,EAAM,IAAIC,eAEdD,EAAIE,OAASoB,EAEbtB,EAAII,QAAU,WAAOC,QAAQC,IAAI,oBAAqB,EAEtDN,EAAIO,KAAK,MAAO,UA1DK,uCA0DM,mBAzDN,2CAyDyB,iBAASX,IACvDI,EAAIQ,MACR,EAEMc,EAAgB,SAACV,GAEnB,IAAIZ,EAAMY,EAAEC,OACRC,EAAMC,KAAKC,MAAMhB,EAAIiB,cAErBM,EAAOd,SAASC,cAAc,QAE9BI,EAAIlB,MAAoB,GAAZkB,EAAIlB,MAKM,SAAlBkB,EAAIU,YAEHf,SAASC,cAAc,cAAiCC,UACzD,sBAAeG,EAAIW,MAAK,oBAAYX,EAAIY,MAAK,OAG7CH,EAAKI,MAAMC,WAAa,sBAAed,EAAIW,MAAK,6BAChDF,EAAKI,MAAME,eAAiB,aAEL,SAAlBf,EAAIU,aAERf,SAASC,cAAc,cAAiCC,UACzD,uCAA+BG,EAAIgB,IAAG,gBAGzCrB,SAASC,cAAc,gBAAmCC,UAAY,cAAOG,EAAIY,MAAK,mBAAWZ,EAAIiB,YAAW,SAnBhHtB,SAASC,cAAc,QAA2BC,UAAY,0BAqBvE,EC3FIqB,EAAoB,GAClBC,EAAkB,eAEpBC,EAA2BC,aAAaC,QAAQH,GAG9CI,EAAU,WAEZ,IAAIC,EAAc,IAAIC,KAAK,UAAGvD,EAAG,WACjCsD,EAAME,QAAQF,EAAMG,UAAY,GAChCzD,EAAM0D,EAAWJ,GACjBK,IACG,GAEC,EAAkB3D,EAE1B,EACM4D,EAAU,WAEZ,IAAIN,EAAc,IAAIC,KAAK,UAAGvD,EAAG,WACjCsD,EAAME,QAAQF,EAAMG,UAAY,GAChCzD,EAAM0D,EAAWJ,GACjBK,IACG,GAEC,EAAkB3D,EAE1B,EAEM2D,EAAY,WAId,IAAIL,EAAc,IAAIC,KAAK,UAAGvD,EAAG,WACjCsD,EAAME,QAAQF,EAAMG,UAAY,GAC7BH,GAAS,IAAIC,KAAK,KAAK,EAAE,IAEvB9B,SAASC,cAAc,gBAAsCiB,MAAMkB,WAAa,UAIhFpC,SAASC,cAAc,gBAAsCiB,MAAMkB,WAAa,UAErFP,EAAQ,IAAIC,KAAK,UAAGvD,EAAG,YACjBwD,QAAQF,EAAMG,UAAY,GAC7BH,EAAQ,IAAIC,KAEV9B,SAASC,cAAc,gBAAsCiB,MAAMkB,WAAa,UAIhFpC,SAASC,cAAc,gBAAsCiB,MAAMkB,WAAa,SAErF,EAAkB7D,GAClBC,EAAS6D,MAAQ9D,CACrB,EAEM0D,EAAa,SAAC9C,GAEhB,IAAImD,EAAgB,UAAGnD,EAAKoD,cAAa,KAazC,OAZIpD,EAAKqD,WAAa,EAAK,GAEvBF,GAAU,WAAInD,EAAKqD,WAAa,EAAC,KAEhCF,GAAU,UAAGnD,EAAKqD,WAAa,EAAC,KAElCrD,EAAK6C,UAAY,GAEhBM,GAAU,WAAInD,EAAK6C,WAElBM,GAAU,UAAGnD,EAAK6C,WAEhBM,CACX,EAEMG,EAAgB,WAEfhB,IAECF,EAAUE,EAAYiB,MAAM,KAC3B1C,SAASC,cAAc,eAAwCC,UAAY,iCAC3EF,SAASC,cAAc,eAAwCC,WAAaqB,EAAQoB,KAAI,SAAAC,GAAK,+BAAkBA,EAAC,aAAKA,EAAC,OAAzB,IAAiCC,KAAK,IACpItB,EAAQuB,SAAQ,SAAA3C,GACXH,SAASC,cAAc,eAAQE,IAAyB4C,QAAU,WAE/DxE,EAAM4B,EACN3B,EAAS6D,MAAQ9D,EACjB2D,GACJ,CACJ,IAER,GAEgB,WAEZ,IAAIc,EAAgBf,EAAW,IAAIH,MACnCvD,EAAMyE,EAEN,IAAMC,EAAcjD,SAASC,cAAc,WACrCiD,EAAclD,SAASC,cAAc,cAE3CgD,EAAWF,QAAU,WACjBG,EAAWC,UAAUC,OAAO,YAChC,EAECpD,SAASC,cAAc,eAAqC8C,QAAU,WAAO,EAAkBxE,EAAI,EACnGyB,SAASC,cAAc,gBAAsC8C,QAAUnB,EACvE5B,SAASC,cAAc,gBAAsC8C,QAAUZ,EAExEM,KAGAjE,EAAYwB,SAASC,cAAc,eAC1BoC,MAAQ,UAAGW,GACpBxE,EAAS6E,IAAM,UAAGL,GAClBxE,EAAS8E,SAAW,WAEhB/E,EAAMC,EAAS6D,MACXd,EAAQgC,MAAK,SAACpD,GAAK,OAAAA,GAAK5B,CAAL,KAEnBgD,EAAQiC,KAAKjF,GAEjBmD,aAAa+B,QAAQjC,EAAS,UAAGD,IACjCE,EAAcC,aAAaC,QAAQH,GACnCiB,IACAP,GACJ,EAEA,EAAkB1D,EAAS6D,OAC3BH,GACJ,CAEAwB,E","sources":["webpack://ready-l-hw3/./src/loader.ts","webpack://ready-l-hw3/./src/main.ts"],"sourcesContent":["const SUN_URL: string = `https://api.sunrise-sunset.org/json?`;\r\nconst NASA_URL: string = `https://api.nasa.gov/planetary/apod?`;\r\nconst NASA_KEY: string = `xodsnbtiJqcWwR7hiMvBfyeABMAV3yWMIUamfg4f`;\r\nlet locationAllowed: Boolean = false;\r\nlet cords: coordinates = {lat:-1,long:-1};\r\n\r\ninterface coordinates {\r\n    lat:number,\r\n    long:number\r\n}\r\n\r\nconst position = (pos:GeolocationPosition) =>\r\n{\r\n    cords = {lat:pos.coords.latitude, long: pos.coords.longitude};\r\n}\r\n\r\nconst findLocation = (date:string) =>\r\n{\r\n    if(navigator.geolocation){\r\n        navigator.geolocation.getCurrentPosition(position);\r\n        locationAllowed = true;\r\n        //1 new XHR object\r\n        let xhr = new XMLHttpRequest();\r\n        //2 set onload handler\r\n        xhr.onload = sunDataLoaded;\r\n        //3 set onerror handler\r\n        xhr.onerror = () => {console.log(`An error occurred`);};\r\n        //4 get open and sent request\r\n        xhr.open(`GET`, `${SUN_URL}lat=${cords.lat}&lng=${cords.long}&date=${date}`);\r\n        xhr.send();\r\n    }\r\n    else\r\n    {\r\n        (document.querySelector(`#location`) as HTMLDivElement).innerHTML = `Unable to access location data. Please allow chrome to access your location.`\r\n    }\r\n}\r\nconst sunDataLoaded = (e:any) =>\r\n{\r\n    let xhr = e.target;\r\n    let obj = JSON.parse(xhr.responseText);\r\n    //8 if no response print and return\r\n    if(!obj.results.sunrise || obj.results.sunrise == 0){\r\n        (document.querySelector(`#location`) as HTMLDivElement).innerHTML = `No times found for your location`;\r\n    }\r\n    else{\r\n        (document.querySelector(`#location`) as HTMLDivElement).innerHTML = \r\n        `Your location is: '${cords.long}','${cords.lat}'<br>Sunrise is at: '${obj.results.sunrise}' UTC Sunset is at: '${obj.results.sunset}' UTC`;\r\n    }\r\n}\r\n\r\nconst dateSelected = (date:string) =>\r\n{\r\n    //1 new XHR object\r\n    let xhr = new XMLHttpRequest();\r\n    //2 set onload handler\r\n    xhr.onload = imgDataLoaded;\r\n    //3 set onerror handler\r\n    xhr.onerror = () => {console.log(`An error occurred`);};\r\n    //4 get open and sent request\r\n    xhr.open(`GET`, `${NASA_URL}api_key=${NASA_KEY}&date=${date}`);\r\n    xhr.send();\r\n}\r\n\r\nconst imgDataLoaded = (e:any) =>\r\n{\r\n    let xhr = e.target;\r\n    let obj = JSON.parse(xhr.responseText);\r\n\r\n    let body = document.querySelector('body')!;\r\n    //8 if no response print and return\r\n    if(!obj.date || obj.date == 0){\r\n        (document.querySelector(`#pod`) as HTMLDivElement).innerHTML = `<b>No results found.</b>`;\r\n    }\r\n    else \r\n    {\r\n        if (obj.media_type == `image`)\r\n        {\r\n            (document.querySelector('#pod-image') as HTMLDivElement).innerHTML = \r\n            `<img src = '${obj.hdurl}' alt = '${obj.title}'/>`;\r\n\r\n            //make background\r\n            body.style.background = `#03122b url(${obj.hdurl}) no-repeat 0px 50% fixed`;\r\n            body.style.backgroundSize = `300% auto`;\r\n        }\r\n        else if (obj.media_type == `video`)\r\n        {\r\n            (document.querySelector('#pod-image') as HTMLDivElement).innerHTML =\r\n            `<iframe width = '100%' src=\"${obj.url}\"></iframe>`;\r\n        }\r\n        //add description\r\n        (document.querySelector('#description') as HTMLDivElement).innerHTML = `<h2>${obj.title}</h2><p>${obj.explanation}</p>`;\r\n    }\r\n}\r\n\r\nexport {dateSelected,findLocation,locationAllowed}","let day:string, calInput:HTMLInputElement;\r\nlet dayList: string[] = [];\r\nconst dateKey: string = `lr4631-dates`;\r\n\r\nlet storedDates: string|null = localStorage.getItem(dateKey);\r\nimport * as load from './loader';\r\n\r\nconst prevDay = () =>\r\n{\r\n    let check: Date = new Date(`${day} 00:00`);\r\n    check.setDate(check.getDate() - 1);\r\n    day = formatDate(check);\r\n    checkDate();\r\n    if(load.locationAllowed)\r\n    {\r\n        load.findLocation(day);\r\n    }\r\n}\r\nconst nextDay = () =>\r\n{\r\n    let check: Date = new Date(`${day} 00:00`);\r\n    check.setDate(check.getDate() + 1);\r\n    day = formatDate(check);\r\n    checkDate();\r\n    if(load.locationAllowed)\r\n    {\r\n        load.findLocation(day);\r\n    }\r\n}\r\n//Date validation\r\nconst checkDate = () =>\r\n{\r\n    //Set up our buttons\r\n    //Dont go past the oldest, or past today\r\n    let check: Date = new Date(`${day} 00:00`);\r\n    check.setDate(check.getDate() - 1);\r\n    if(check >= new Date(1995,6,16))\r\n    {\r\n        (document.querySelector(`#prev-button`) as HTMLButtonElement).style.visibility = `visible`;\r\n    }\r\n    else\r\n    {\r\n        (document.querySelector(`#prev-button`) as HTMLButtonElement).style.visibility = `hidden`;\r\n    }\r\n    check = new Date(`${day} 00:00`);\r\n    check.setDate(check.getDate() + 1);\r\n    if(check < new Date())\r\n    {\r\n        (document.querySelector(`#next-button`) as HTMLButtonElement).style.visibility = `visible`;\r\n    }\r\n    else\r\n    {\r\n        (document.querySelector(`#next-button`) as HTMLButtonElement).style.visibility = `hidden`;\r\n    }\r\n    load.dateSelected(day);\r\n    calInput.value = day;\r\n}\r\n\r\nconst formatDate = (date:Date): string =>\r\n{\r\n    let format:string = `${date.getFullYear()}-`;\r\n    if((date.getMonth() + 1) < 10)\r\n    {\r\n        format += `0${date.getMonth() + 1}-`;\r\n    }\r\n    else{format += `${date.getMonth() + 1}-`;}\r\n\r\n    if(date.getDate() < 10)\r\n    {\r\n        format += `0${date.getDate()}`;\r\n    }\r\n    else{format += `${date.getDate()}`;}\r\n\r\n    return format;\r\n}\r\n\r\nconst loopDateLinks = () =>\r\n{\r\n    if(storedDates)\r\n    {\r\n        dayList = storedDates.split(`,`);\r\n        (document.querySelector(`#prev-dates`) as HTMLParagraphElement).innerHTML = `Previously Searched For Dates:`;\r\n        (document.querySelector(`#prev-dates`) as HTMLParagraphElement).innerHTML += dayList.map(x => `<br><a id=\"date${x}\">${x}</a>`).join(\"\");\r\n        dayList.forEach(e => {\r\n            (document.querySelector(`#date${e}`) as HTMLLinkElement).onclick = () => \r\n            {\r\n                day = e;\r\n                calInput.value = day;\r\n                checkDate();\r\n            };\r\n        });\r\n    }\r\n}\r\n\r\nconst setupUI = () =>\r\n{\r\n    let today: string = formatDate(new Date());\r\n    day = today;\r\n    //This goes first so when the rest of UI setup fails the about doc, this still works\r\n    const burgerIcon = (document.querySelector('#burger') as HTMLLinkElement);\r\n    const navbarMenu = (document.querySelector('#nav-links') as HTMLDivElement);\r\n\r\n    burgerIcon.onclick = () => {\r\n        navbarMenu.classList.toggle('is-active');\r\n    };\r\n    //Set up buttons\r\n    (document.querySelector(`#loc-button`) as HTMLButtonElement).onclick = () => {load.findLocation(day)};\r\n    (document.querySelector(`#prev-button`) as HTMLButtonElement).onclick = prevDay;\r\n    (document.querySelector(`#next-button`) as HTMLButtonElement).onclick = nextDay;\r\n\r\n    loopDateLinks();\r\n\r\n    //Set up the calendar\r\n    calInput = (document.querySelector('#input-cal') as HTMLInputElement);\r\n    calInput.value = `${today}`;\r\n    calInput.max = `${today}`;\r\n    calInput.onchange = () =>\r\n    {\r\n        day = calInput.value;\r\n        if(!dayList.find((e)=> e == day))\r\n        {\r\n            dayList.push(day);\r\n        }\r\n        localStorage.setItem(dateKey, `${dayList}`);\r\n        storedDates = localStorage.getItem(dateKey);\r\n        loopDateLinks();\r\n        checkDate();\r\n    };\r\n\r\n    load.dateSelected(calInput.value);\r\n    checkDate();\r\n}\r\n\r\nsetupUI();"],"names":["day","calInput","locationAllowed","cords","lat","long","position","pos","coords","latitude","longitude","findLocation","date","navigator","geolocation","getCurrentPosition","xhr","XMLHttpRequest","onload","sunDataLoaded","onerror","console","log","open","send","document","querySelector","innerHTML","e","target","obj","JSON","parse","responseText","results","sunrise","sunset","dateSelected","imgDataLoaded","body","media_type","hdurl","title","style","background","backgroundSize","url","explanation","dayList","dateKey","storedDates","localStorage","getItem","prevDay","check","Date","setDate","getDate","formatDate","checkDate","nextDay","visibility","value","format","getFullYear","getMonth","loopDateLinks","split","map","x","join","forEach","onclick","today","burgerIcon","navbarMenu","classList","toggle","max","onchange","find","push","setItem","setupUI"],"sourceRoot":""}